#+TITLE: (Doom) Emacs Configuration
#+AUTHOR: zedkaido

#+BEGIN_QUOTE
No rules are universal (except this one).
#+END_QUOTE

* Core Configurations (config.el)
Jiggle things up with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]] for more info).
#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** User Info
You know, all the conventional stuff...
#+begin_src emacs-lisp
(setq
 user-full-name "Zed Kaido"
 user-mail-address "dm@zedkaido.com")
#+end_src

** GPG
#+begin_src emacs-lisp
(setq auth-sources '("~/.doom.d/.authinfo.gpg"))
#+end_src

** Sweat Defaults
#+BEGIN_QUOTE
We either live with intention or exist by default.
#+END_QUOTE

Maximize frame on startup
#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

Good old defaults
#+begin_src emacs-lisp
(setq-default delete-by-moving-to-trash t
							line-number-mode 1 ;; (modeline)
							column-number-mode 1 ;; (modeline)
							global-display-line-numbers-mode nil
							global-hl-line-mode nil
							global-hl-line-modes nil
							display-line-numbers-type nil
							editorconfig-mode 1
							indent-tabs-mode t
							tab-width 3)
#+end_src

Smartparens get in the way (it's faster to type)
#+begin_src emacs-lisp
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src

Make Renaming File + Buffer easy
#+begin_src emacs-lisp
(defun rename-file-and-buffer ()
	"Rename the current buffer and the file it is visiting."
	(interactive)
	(let ((filename (buffer-file-name)))
		(if (not (and filename (file-exists-p filename)))
	(message "Buffer is not visiting a file!")
			(let ((new-name (read-file-name "New name: " filename)))
	(cond ((vc-backend filename) (vc-rename-file filename new-name))
							(t (rename-file filename new-name t)
		 (set-visited-file-name new-name t)))
	))))
#+end_src

*** Performance Boosters
Let's put some thrusters on the back of this "Roadster".

Emacs has the capability to display ~left-to-right~ and ~right-to-left~ languages at the
same time in the same buffer. I don't need it. Because it adds to the amount of line scans
that Emacs has to do to render a line, here are some changes.
#+begin_src emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right)
#+end_src

When the lines in a file are so long that performance could suffer to an unacceptable
degree, the following invokes something much more basic.
#+begin_src emacs-lisp
(global-so-long-mode 1)
#+end_src

Allow 20MB of memory before calling garbage collection. GS runs less often, sped up operations.
#+begin_src emacs-lisp
(setq gc-cons-threshold 24242424)
#+end_src

-----
*NOTE*: You can test and evaluate performance with ~profiler-start~ and ~profiler-stop~.

** User Interface
*** Font Face
The *ultimate* font for hackers.
#+begin_src emacs-lisp
(setq
 doom-font (font-spec :family "JetBrains Mono" :size 13)
 doom-big-font (font-spec :family "JetBrains Mono" :size 13)
 doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 13)
 doom-serif-font (font-spec :family "JetBrains Mono" :size 13))
#+end_src

*** Theme
My *ultimate* theme.
#+begin_src emacs-lisp
(load-theme 'zk-white t)
#+end_src

**** Cursor
#+begin_src emacs-lisp
(setq evil-normal-state-cursor '(box)
			evil-insert-state-cursor '(box)
			evil-visual-state-cursor '(hollow)
			evil-operator-state-cursor '(box "#404040")
			evil-replace-state-cursor '(hollow))
#+end_src

*** Modeline
"~path/filename"
#+begin_src emacs-lisp
(setq-default mode-line-buffer-identification
							'(:eval (propertize
											 (concat (abbreviate-file-name (file-name-directory buffer-file-name))
															 (file-name-nondirectory buffer-file-name))
											 'face 'mode-line-filename)))
#+end_src

And a simple modeline:
#+begin_src emacs-lisp
(setq-default
 mode-line-format
 '("%e"
	 mode-line-front-space
	 mode-line-mule-info
	 mode-line-client
	 mode-line-modified
	 mode-line-remote
	 mode-line-frame-identification
	 mode-line-buffer-identification
	 "   "
	 "<ETC?>" ;; ETC Reminder (Easier To Change)
	 "   "
	 mode-line-position
	 (vc-mode vc-mode)
	 "  "
	 mode-name
	 "  "
	 mode-line-process
	 "  "
	 mode-line-misc-info mode-line-end-spaces))
#+end_src

Show vim mode in modeline
#+begin_src emacs-lisp
(setq evil-mode-line-format '(before . mode-line-front-space))
#+end_src

** Bindings
Life-time savers (kinda).
*** (Enable/Disable) Fill column
#+begin_src emacs-lisp
(map! :leader
			(:prefix "b"
			 :desc "Display fill-column indicator"    "f" #'display-fill-column-indicator-mode))
#+end_src

*** File
#+begin_src emacs-lisp
(map!
 :leader
 (:prefix-map ("f" . "file")
							(:prefix-map ("g" . "goto")
							 :desc "tmp"          "t" (cmd! (find-file "/tmp"))
							 :desc "drive"        "/" (cmd! (find-file "/"))
							 :desc "home"         "h" (cmd! (find-file "~"))
							 :desc "zk"           "z" (cmd! (find-file "~/zk"))
							 :desc "books"        "g" (cmd! (find-file "~/zk/books"))
							 :desc "Org Roam"       "g" (cmd! (find-file "~/zk/org"))
							 :desc "projects"     "p" (cmd! (find-file "~/zk/projects"))
							 :desc "music"        "m" (cmd! (find-file "~/zk/music"))
							 :desc "desktop"      "D" (cmd! (find-file "~/Desktop"))
							 :desc "downloads"    "d" (cmd! (find-file "~/Downloads"))
							 )))
#+end_src

*** Counsel
#+begin_src emacs-lisp
(map!
 :leader
 (:prefix-map ("c" . "code")
							(:prefix-map ("b" . "Counsel")
							 :desc "Find" "/" 'counsel-dash
							 :desc "Find (by Cursor)" "." 'counsel-dash-at-point
							 :desc "Activate Doc in Buffer" "a" 'counsel-dash-activate-docset
							 :desc "Deactivate Doc to Buffer" "d" 'counsel-dash-deactivate-docset)))
#+end_src

*** Org-Roam
#+begin_src emacs-lisp
(map!
 :leader
 (:prefix-map ("t" . "toggle")
	:desc "Org-Roam Buffer" "o" 'org-roam-buffer-toggle-display
	:desc "Composition Mode (Ligatures)" "c" 'toggle-auto-composition))
#+end_src


** (init.el) Doom Configuration
*** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

Doom has this lovely /modular configuration base/ that takes a lot of work out of
configuring Emacs. Each module (when enabled) can provide a list of packages to
install (on ~doom sync~) and configuration to be applied. The modules can also
have flags applied to tweak their behaviour.

#+name: init.el
#+attr_html: :collapsed t
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :noweb-ref none
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view its documentation, and 'gd' to browse its directory.

(doom! :input
			 <<doom-input>>

			 :completion
			 <<doom-completion>>

			 :ui
			 <<doom-ui>>

			 :editor
			 <<doom-editor>>

			 :emacs
			 <<doom-emacs>>

			 :term
			 <<doom-term>>

			 :checkers
			 <<doom-checkers>>

			 :tools
			 <<doom-tools>>

			 :os
			 <<doom-os>>

			 :lang
			 <<doom-lang>>

			 :email
			 <<doom-email>>

			 :app
			 <<doom-app>>

			 :config
			 <<doom-config>>
			 )
#+end_src

**** Structure
As you may have noticed by this point, this is a [[https://en.wikipedia.org/wiki/Literate_programming][literate]] configuration. Doom
has good support for this which we access though the ~literate~ module.

While we're in the src_elisp{:config} section, we'll use Dooms nicer defaults,
along with the bindings and smartparens behaviour (the flags aren't documented,
but they exist).
#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings)          ; +smartparens is an option (I like writing)
#+end_src

**** Interface
There's a lot that can be done to enhance Emacs' capabilities.
I reckon enabling half the modules Doom provides should do it.

#+name: doom-completion
#+begin_src emacs-lisp
(company                     ; the ultimate code completion backend
 +childframe)                ; ... when your children are better than you
;;helm                       ; the *other* search engine for love and life
;;ido                        ; the other *other* search engine...
;; (ivy                      ; a search engine for love and life
;;  +icons                   ; ... icons are nice
;;  +prescient)              ; ... I know what I want(ed)
vertico                      ; the search engine of the future (+icons is an option)
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
;;deft                       ; notational velocity for Emacs
doom                         ; what makes DOOM look the way it does
;;doom-dashboard             ; a nifty splash screen for Emacs
doom-quit                    ; DOOM quit-message prompts when you quit Emacs
;;(emoji +unicode)           ; 🙂
;;fill-column                ; a `fill-column' indicator
hl-todo                      ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra                      ; quick documentation for related commands
;;indent-guides              ; highlighted indent columns, notoriously slow
;;(ligatures +extra)         ; ligatures and symbols to make your code pretty again
;;minimap                    ; show a map of the code on the side
;;modeline                   ; snazzy, Atom-inspired modeline, plus API
;;nav-flash                    ; blink the current line after jumping
;;neotree                    ; a project drawer, like NERDTree for vim
ophints                      ; highlight the region an operation acts on
(popup                       ; tame sudden yet inevitable temporary windows
 +all                        ; catch all popups that start with an asterix
 +defaults)                  ; default popup rules
;;(tabs                      ; an tab bar for Emacs
;;  +centaur-tabs)           ; ... with prettier tabs
;;treemacs                   ; a project drawer, like neotree but cooler
;;unicode                    ; extended unicode support for various languages
;;(vc-gutter +pretty)          ; vcs diff in the fringe
vi-tilde-fringe              ; fringe tildes to mark beyond EOB
;;(window-select +numbers)   ; visually switch windows
workspaces                   ; tab emulation, persistence & separate workspaces
zen                          ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)           ; come to the dark side, we have cookies
file-templates               ; auto-snippets for empty files
fold                         ; (nigh) universal code folding
(format)                     ; automated prettiness
;;god                        ; run Emacs commands without modifier keys
;;lispy                      ; vim for lisp, for people who don't like vim
multiple-cursors             ; editing in many places at once
;;objed                      ; text object editing for the innocent
;;parinfer                   ; turn lisp into python, sort of
rotate-text                  ; cycle region at point between text candidates
snippets                     ; my elves. They type so I don't have to
;;word-wrap                  ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
dired                        ; making dired pretty [functional]
electric                     ; smarter, keyword-based electric-indent
ibuffer                      ; interactive buffer management
undo                         ; persistent, smarter undo for your inevitable mistakes
vc                           ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
;;eshell                     ; the elisp shell that works everywhere
;;shell                      ; simple shell REPL for Emacs
;;term                       ; basic terminal emulator for Emacs
vterm                        ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
syntax                       ; tasing you for every semicolon you forget
;;(:if (executable-find "aspell") spell) ; tasing you for misspelling mispelling
;;grammar                    ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
;;ansible                    ; a crucible for infrastructure as code
;;biblio                     ; Writes a PhD for you (citation needed)
;;debugger                   ; FIXME stepping through code, to help you add bugs
;;direnv                     ; be direct about your environment
;;docker                     ; port everything to containers
editorconfig                 ; let someone else argue about tabs vs spaces
;;ein                        ; tame Jupyter notebooks with emacs
(eval +overlay)              ; run code, run (also, repls)
;;gist                       ; interacting with github gists
(lookup                      ; helps you navigate your code and documentation
 +dictionary                 ; dictionary/thesaurus is nice
 +docsets)                   ; ...or in Dash docsets locally
lsp                          ; Language Server Protocol
(magit                       ; a git porcelain for Emacs
 +forge)                     ; interface with git forges
make                         ; run make tasks from Emacs
pass                         ; password manager for nerds
pdf                          ; pdf enhancements
;;prodigy                    ; FIXME managing external services & code builders
rgb                          ; creating color strings
;;taskrunner                 ; taskrunner for all your projects
;;terraform                  ; infrastructure as code
;;tmux                       ; an API for interacting with tmux
;;tree-sitter                ; syntax and parsing, sitting in a tree...
upload                       ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)           ; improve compatibility with macOS
tty                          ; improve the terminal Emacs experience
#+end_src

**** Language support

We can be rather liberal with enabling support for languages as the associated
packages/configuration are (usually) only loaded when first opening an
associated file.

#+name: doom-lang
#+begin_src emacs-lisp
;;agda                       ; types of types of types of types...
;;beancount                  ; mind the GAAP
(cc +lsp)                    ; C > C++ == 1
;;clojure                    ; java with a lisp
;;common-lisp                ; if you've seen one lisp, you've seen them all
;;coq                        ; proofs-as-programs
;;crystal                    ; ruby at the speed of c
;;csharp                     ; unity, .NET, and mono shenanigans
data                         ; config/data formats
;;(dart +flutter)            ; paint ui and not much else
;;dhall                      ; JSON with FP sprinkles
;;elixir                     ; erlang done right
;;elm                        ; care for a cup of TEA?
emacs-lisp                   ; drown in parentheses
;;erlang                     ; an elegant language for a more civilized age
;;ess                        ; emacs speaks statistics
;;faust                      ; dsp, but you get to keep your soul
;;fsharp                     ; ML stands for Microsoft's Language
;;fstar                      ; (dependent) types and (monadic) effects and Z3
;;gdscript                   ; the language you waited for
(graphql +lsp)               ; Give queries a REST
(go +lsp)                    ; the hipster dialect
(haskell +lsp)               ; a language that's lazier than I am
;;hy                         ; readability of scheme w/ speed of python
;;idris                      ;
json                         ; At least it ain't XML
;;(java +lsp)                ; the poster child for carpal tunnel syndrome
(javascript +lsp)            ; all(hope(abandon(ye(who(enter(here))))))
;;(julia +lsp)               ; Python, R, and MATLAB in a blender
;;kotlin                     ; a better, slicker Java(Script)
(latex                       ; writing papers in Emacs has never been so fun
 +latexmk                    ; what else would you use?
 +fold                       ; fold the clutter away nicities
 +cdlatex)                   ; quick maths symbols
;;lean                       ; proof that mathematicians need help
;;factor                     ; for when scripts are stacked against you
;;ledger                     ; an accounting system in Emacs
;;lua                        ; one-based indices? one-based indices
markdown                     ; writing docs for people to ignore
;;nim                        ; python + lisp at the speed of c
nix                          ; I hereby declare "nix geht mehr!"
;;ocaml                      ; an objective camel
(org                         ; organize your plain life in plain text
 +dragndrop                  ; drag & drop files/images into org buffers
 ;;+hugo                     ; use Emacs for hugo blogging
 ;;+noter                    ; enhanced PDF notetaking
 ;;+jupyter                  ; ipython/jupyter support for babel
 +pandoc                     ; export-with-pandoc support
 +gnuplot                    ; who doesn't like pretty pictures
 ;;+pomodoro                 ; be fruitful with the tomato technique
 +present                    ; using org-mode for presentations
 +roam2)                     ; wander around notes
;;php                        ; perl's insecure younger brother
;;plantuml                   ; diagrams for confusing people more
;;purescript                 ; javascript, but functional
(python +lsp +pyright)       ; beautiful is better than ugly
;;qt                         ; the 'cutest' gui framework ever
;;racket                     ; a DSL for DSLs
;;raku                       ; the artist formerly known as perl6
;;rest                       ; Emacs as a REST client
;;rst                        ; ReST in peace
;;(ruby +rails)              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust +lsp)                  ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala                      ; java, but good
;;scheme                     ; a fully conniving family of lisps
sh                           ; she sells {ba,z,fi}sh shells on the C xor
;;sml                        ; no, the /other/ ML
;;solidity                   ; do you need a blockchain? No.
swift                        ; who asked for emoji variables?
;;terra                      ; Earth and Moon in alignment for performance.
(web +html +css +lsp)        ; the tubes
;;yaml                       ; JSON, but readable
;;zig                        ; C, but simpler
#+end_src

**** Input

#+name: doom-input
#+begin_src emacs-lisp
;;bidi                       ; (tfel ot) thgir etirw uoy gnipleh
;;chinese
;;japanese
;;layout                     ; auie,ctsrnm is the superior home row
#+end_src

**** Everything in Emacs

It's just too convenient being able to have everything in Emacs.
I couldn't resist the Email and Feed modules.

#+name: doom-email
#+begin_src emacs-lisp
(:if (executable-find "mu") (mu4e +org))
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
;;calendar                   ; A dated approach to timetabling
;;emms                       ; Multimedia in Emacs is music to my ears
;;everywhere                 ; *leave* Emacs!? You must be joking.
irc                          ; how neckbeards socialize
(rss +org)                   ; emacs as an RSS reader
;;twitter                    ; twitter client https://twitter.com/vnought
#+end_src

** (packages.el) Package Stack
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments link
:END:
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src

*** Instructions
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
Install packages here, by declaring them with the ~package!~ macro.
Upon adding new package, run ~doom refresh~ and restart Emacs.

**** Package in MELPA/ELPA/emacsmirror
To install ~the-package~ from MELPA, ELPA or emacsmirror:
#+begin_src emacs-lisp
(package! the-package)
#+end_src

**** Packages from git repositories
To install a package directly from a particular repo, you'll need to specify a ~:recipe~.
You'll find documentation on what ~:recipe~ accepts [[https://github.com/raxod502/straight.el#the-recipe-format][here]]:
#+begin_src emacs-lisp
(package! another-package
	:recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a ~PACKAGENAME.el~ file, or is
located in a subdirectory of the repo, you'll need to specify
~:files~ in the ~:recipe~:
#+begin_src emacs-lisp
(package! this-package
	:recipe (:host github :repo "username/repo"
					 :files ("some-file.el" "src/lisp/*.el")))
#+end_src

**** Disabling built-in packages
To disable a package included with Doom, you can do so here with the ~:disable~ property:
#+begin_src emacs-lisp
(package! builtin-package :disable t)
#+end_src

Override the recipe of a built in package without having to specify all the properties
for ~:recipe~. These will inherit the rest of its recipe from Doom or the
package providers.
#+begin_src emacs-lisp
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a ~:branch~ to install a package from a particular branch or tag. This is required
for some

#+begin_src emacs-lisp
(package! builtin-package :recipe (:branch "develop"))
#+end_src

*** Sweat Packages
#+BEGIN_QUOTE
Always strive to make complex things simple.
#+END_QUOTE

**** All The Fun
Flash words, increase reading speed.
#+begin_src emacs-lisp
(package! spray)
#+end_src

Let's get those fingers moving.
#+begin_src emacs-lisp
(package! speed-type)
#+end_src

**** Convenient
The worst part about ~org-mode~? Having to leave it.
#+begin_src emacs-lisp
(package! org-pandoc-import
	:recipe (:host github
					 :repo "tecosaur/org-pandoc-import"
					 :files ("*.el" "filters" "preprocessors")))
#+end_src

When in need of logging commands.
#+begin_src emacs-lisp
(package! command-log-mode)
#+end_src

Every one needs to jump around dumbly from time to time, right?
#+begin_src emacs-lisp
(package! dumb-jump)
#+end_src

Elisp formatting
#+begin_src emacs-lisp
(package! elisp-format)
#+end_src

Engine Mode
#+begin_src emacs-lisp
(package! engine-mode)
#+end_src

Who doesn't read EPUBs?
#+begin_src emacs-lisp
(package! nov)
#+end_src

Movedidakadooo
#+begin_src emacs-lisp
(package! transpose-frame)
#+end_src

Screenshot away the world
#+begin_src emacs-lisp
(package! screenshot :recipe (:local-repo "lisp/screenshot"))
#+end_src

org-roam-ui (zettelkasten)
#+begin_src emacs-lisp
(unpin! org-roam) ;; use the latest version of org-roam
(package! org-roam-ui)
#+end_src

keycast for (when you need to show the keys you are pressing)
#+begin_src emacs-lisp
(package! keycast)
#+end_src

Who uses their mouse in their editor?
#+begin_src emacs-lisp
(package! disable-mouse)
#+end_src

**** Language Support
If it ain't useful and fast, why bother?

Svelte, the love of my life.
#+begin_src emacs-lisp
(package! svelte-mode)
#+end_src

Prettier-js for beatiful js code
#+begin_src emacs-lisp
(package! prettier-js)
#+end_src

**** AIs
#+begin_src emacs-lisp
(package! org-ai)
#+end_src

*** Balderdash (Disabled) Packages
Cause why in the world were they included?

Disable package that overlays code with errors/warnings from Flycheck
#+begin_src emacs-lisp
(package! flycheck-popup-tip :disable t)
#+end_src

** (config.el) Package Configuration
*** Calc
Cause radians are rad.
#+begin_src emacs-lisp
(setq calc-angle-mode 'rad
			calc-algebraic-mode t ;; allows '2*x instead of 'x<RET>2*
			calc-symbolic-mode t) ;; keeps stuff like √2 irrational for as long as possible
#+end_src

*** Company
Completion is nice but, only when I want it... I might actually want it :)
#+begin_src emacs-lisp
(after! company
	(setq company-idle-delay nil)
	(add-hook 'evil-normal-state-entry-hook #'company-abort))
#+end_src

Also, improve ~company~ (related) memory.
#+begin_src emacs-lisp
(setq-default history-length 50)
(setq-default history-delete-duplicates t)
#+end_src

*** Prettier
i find it a bit intrusive to have it automatically on. code is prose.
#+begin_src emacs-lisp
;; (add-hook 'js2-mode-hook 'prettier-js-mode)
;; (add-hook 'web-mode-hook 'prettier-js-mode)
#+end_src

#+begin_src emacs-lisp
(setq prettier-js-args '(
			 "--use-tabs" "true"
			 "--tab-width" 2
			 "--single-quote" "true"
			 "--trailing-comma" "all"
			 "--bracket-spacing" "false"
			 ))
#+end_src

*** Which-key
make it pop up faster
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5) ;; I need the help, I really do
#+end_src

*** Dumb-Jump
Enable ~xref~ back-end.
#+BEGIN_SRC emacs-lisp
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+END_SRC

And, in case things go sideways:
#+BEGIN_SRC emacs-lisp
(setq dumb-jump-default-project "~/main")
#+END_SRC

*** EVIL
So there's this one package called ~evil-escape~. Here's the thing, I don't use it. So...
#+BEGIN_SRC emacs-lisp
(after! evil (evil-escape-mode -1))
#+END_SRC

Also think that having evil- appear in so many popups is a bit too verbose, let’s change that, and do a few other similar tweaks while we’re at it.
#+begin_src emacs-lisp
(setq which-key-allow-multiple-replacements t)
(after! which-key
	(pushnew!
	 which-key-replacement-alist
	 '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
	 '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
	 ))
#+end_src

*** disable-mouse
I ❤️ my keyboard
#+begin_src emacs-lisp
(global-disable-mouse-mode)
;; And, for evil's individual states.
(mapc #'disable-mouse-in-keymap
      (list evil-motion-state-map
            evil-normal-state-map
            evil-visual-state-map
            evil-insert-state-map))
#+end_src

*** Nov (EPUBs)
The place all want to spend their time.
#+begin_src emacs-lisp
(setq nov-text-width 100)
(use-package! nov
	:mode ("\\.epub\\'" . nov-mode)
	:config
	(setq nov-save-place-file (concat doom-cache-dir "nov-places")))
#+end_src

*** Org-Download
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'org-download-enable)
(setq org-download-image-dir "~/zk/org/images")
#+END_SRC

*** Org-Roam
The thinking process.
#+BEGIN_SRC emacs-lisp
(setq org-roam-directory "~/zk/org")
#+END_SRC

**** org-roam-ui
#+begin_src emacs-lisp
(use-package! websocket
	:after org-roam)

(use-package! org-roam-ui
	:after org-roam ;; or :after org
	;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
	;;         a hookable mode anymore, you're advised to pick something yourself
	;;         if you don't care about startup time, use
	;;  :hook (after-init . org-roam-ui-mode)
	:config
	(setq org-roam-ui-sync-theme t
				org-roam-ui-follow t
				org-roam-ui-update-on-save t
				org-roam-ui-open-on-start t))
#+end_src

*** Org-Pandoc
#+begin_src emacs-lisp
(use-package! org-pandoc-import :after org)
#+end_src

*** Projectile
All about those projects.
#+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/zk"))
(setq projectile-ignored-projects
			(list "~/" "/tmp"))
#+END_SRC

*** Ligatures
Make it click.
#+begin_src emacs-lisp
(setq +ligatures-in-modes '(not org-mode special-mode))
#+end_src

*** Engine-Mode
All the www is at my fingertips.
#+begin_src emacs-lisp
(setq engine-mode t)
#+end_src

Effective Search Engines.
#+begin_src emacs-lisp
(defengine brave
	"https://search.brave.com/search?q=%s"
	:keybinding "b"
	:browser 'eww-browse-url)

(defengine hoogle
	"https://hoogle.haskell.org/?hoogle=%s"
	:keybinding "h"
	:browser 'eww-browse-url)
#+end_src

**** Elfeed
RSS for life.
#+begin_src emacs-lisp
(setq elfeed-feeds
			'("http://nullprogram.com/feed/"
	"https://planet.emacslife.com/atom.xml"
	"https://zedkaido.com/rss.xml"
	"https://lukesmith.xyz/index.xml"
	"https://stallman.org/rss/rss.xml"
	))
#+end_src

**** Lookup Settings (Alternative Search Engines)
Lookup search engines
#+begin_src emacs-lisp
(setq +lookup-provider-url-alist
			'(
				("DuckDuckGo" +lookup--online-backend-duckduckgo "https://duckduckgo.com/?q=%s")
				("Hoogle" "https://hoogle.haskell.org/?hoogle=%s")
				("Google" +lookup--online-backend-google "https://google.com/search?q=%s")
				("Google images" "https://www.google.com/images?q=%s")
				("Google maps" "https://maps.google.com/maps?q=%s")
				("Project Gutenberg" "http://www.gutenberg.org/ebooks/search/?query=%s")
				("Archive" "https://archive.org/searchresults.php?search=%s&sin=&limit=100&fts_terms=&start=0&searchAll=yes&submit=this+was+submitted")
				("PDFdrive" "https://www.pdfdrive.com/search?q=%s&pagecount=&pubyear=&searchin=&em=")
				("DevDocs.io" "https://devdocs.io/#q=%s")
				("StackOverflow" "https://stackoverflow.com/search?q=%s")
				("Github" "https://github.com/search?ref=simplesearch&q=%s")
				("Youtube" "https://youtube.com/results?aq=f&oq=&search_query=%s")
				("Twitter" "https://twitter.com/search?q=%s")
				("Wolfram alpha" "https://wolframalpha.com/input/?i=%s")
				("Wikipedia" "https://wikipedia.org/search-redirect.php?language=en&go=Go&search=%s")
				("MDN" "https://developer.mozilla.org/en-US/search?q=%s")
				("Rust Docs" "https://doc.rust-lang.org/std/?search=%s")
				("Doom Emacs issues" "https://github.com/hlissner/doom-emacs/issues?q=is%%3Aissue+%s")
				)
			)
#+end_src

*** IRC Circe Config
#+begin_src emacs-lisp
(defun my-fetch-password (&rest params)
  (require 'auth-source)
  (let ((match (car (apply 'auth-source-search params))))
    (if match
        (let ((secret (plist-get match :secret)))
          (if (functionp secret)
              (funcall secret)
            secret))
      (error "Password not found for %S" params))))

(defun my-nickserv-password (server)
  (my-fetch-password :user "zedkaido" :machine "irc.libera.chat"))

(setq circe-network-options
      '(("Libera Chat"
         :nick "zedkaido"
         :channels ("#web" "#internet" "200ok" "haskell")
         :nickserv-password my-nickserv-password)))
#+end_src

*** ZEN
#+begin_src emacs-lisp
(setq +zen-text-scale 0.8)
#+end_src

*** Org Mode
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/.org"
			org-log-done 'time
			org-export-in-background t
			org-catch-invisible-edits 'smart)
#+END_SRC

#+begin_src emacs-lisp
(after! org
	(setq org-fontify-quote-and-verse-block nil
	org-fontify-whole-heading-line nil
	org-hide-leading-stars nil
	))
#+end_src

*** LSP
Language Server Protocol?
#+begin_src emacs-lisp
;; (setq lsp-lens-enable nil
;;       lsp-auto-execute-action nil
;;       lsp-before-save-edits nil
;;       lsp-ui-sideline-enable nil
;;       lsp-modeline-code-actions-mode t
;;       lsp-headerline-breadcrumb-enable nil)
#+end_src

*** Flycheck
The things that YELLS at your code everytime you make a mistake.
#+begin_src emacs-lisp
(setq flycheck-check-syntax-automatically '(save idle-change mode-enabled))
#+end_src

*** AIS
**** org-ai
#+begin_src emacs-lisp
(require 'org-ai)
(add-hook 'org-mode-hook #'org-ai-mode)
#+end_src

#+begin_src emacs-lisp
(setq org-ai-default-chat-model "gpt-3.5-turbo")
;; (setq org-ai-default-chat-model "gpt-4")
#+end_src

** other
*** helper functions to cleanup gazillion buffers
delete all buffers except the current one
#+begin_src emacs-lisp
(defun kill-other-buffers ()
	"Kill all other buffers."
	(interactive)
	(mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

~dired~ will create buffers for every visited folder (these clears those folder)
#+begin_src emacs-lisp
(defun kill-dired-buffers ()
  "Kill all open dired buffers."
  (interactive)
  (mapc (lambda (buffer)
	  (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
	    (kill-buffer buffer)))
	(buffer-list)))
#+end_src

*** disable ~evil-mode~ for some modes
#+begin_src emacs-lisp
(mapc (lambda (mode)
	(evil-set-initial-state mode 'emacs)) '(elfeed-show-mode
						efleed-search-mode
						forge-pullreq-list-mode
						image-dired-mode
						image-dired-thumbnail-mode
						Info-mode
						))
#+end_src
